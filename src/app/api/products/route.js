import { connectDB, Product, User } from "@/models/models";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function GET(request) {
  try {
    await connectDB();

    // ✅ Require auth via cookie
    const cookieStore = await cookies();
    const userId = cookieStore.get("userId")?.value;
    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get("page")) || 1;
    const limit = parseInt(searchParams.get("limit")) || 100;
    const skip = (page - 1) * limit;

    let filter = { userId }; // ✅ user can only see their own products

    // ✅ Filter by active/inactive
    const isActive = searchParams.get("isActive");
    if (isActive !== null && isActive !== "all") {
      filter.isActive = isActive === "true";
    }

    // ✅ Filter by name
    const name = searchParams.get("name");
    if (name) {
      filter.name = { $regex: name, $options: "i" };
    }

    // ✅ Filter by category
    const category = searchParams.get("category");
    if (category) {
      filter.category = { $regex: category, $options: "i" };
    }

    // ✅ Filter by sku
    const sku = searchParams.get("sku");
    if (sku) {
      filter.sku = { $regex: sku, $options: "i" };
    }

    // ✅ Filter by username (redundant since userId is enforced, but kept for admin extension)
    const username = searchParams.get("username");
    if (username) {
      filter.userName = { $regex: username, $options: "i" };
    }

    // ✅ Price filtering
    const price = searchParams.get("price");
    const priceOperator = searchParams.get("priceOperator") || "equal";
    if (price) {
      const priceNum = Number(price);
      switch (priceOperator) {
        case "greater":
          filter.price = { $gt: priceNum };
          break;
        case "less":
          filter.price = { $lt: priceNum };
          break;
        case "not-equal":
          filter.price = { $ne: priceNum };
          break;
        default:
          filter.price = priceNum;
      }
    }

    // ✅ Stock filtering
    const stock = searchParams.get("stock");
    const stockOperator = searchParams.get("stockOperator") || "equal";
    if (stock) {
      const stockNum = Number(stock);
      switch (stockOperator) {
        case "greater":
          filter.stock = { $gt: stockNum };
          break;
        case "less":
          filter.stock = { $lt: stockNum };
          break;
        case "not-equal":
          filter.stock = { $ne: stockNum };
          break;
        default:
          filter.stock = stockNum;
      }
    }

    const products = await Product.find(filter)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .lean();

    const totalProducts = await Product.countDocuments(filter);
    const totalPages = Math.ceil(totalProducts / limit);

    return NextResponse.json({
      success: true,
      products,
      pagination: {
        currentPage: page,
        totalPages,
        totalProducts,
        hasNext: page < totalPages,
        hasPrev: page > 1,
      },
    });
  } catch (error) {
    console.error("Error fetching products:", error);
    return NextResponse.json(
      { error: "Failed to fetch products" },
      { status: 500 }
    );
  }
}

export async function POST(request) {
  try {
    await connectDB();

    // ✅ Get userId from cookie
    const cookieStore = await cookies();
    const userId = cookieStore.get("userId")?.value;
    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { name, description, category, price, stock } = await request.json();

    if (!name || !category || price === undefined || stock === undefined) {
      return NextResponse.json(
        { error: "Name, category, price, and stock are required" },
        { status: 400 }
      );
    }

    if (isNaN(price) || price < 0) {
      return NextResponse.json(
        { error: "Price must be a valid non-negative number" },
        { status: 400 }
      );
    }

    if (isNaN(stock) || stock < 0 || !Number.isInteger(Number(stock))) {
      return NextResponse.json(
        { error: "Stock must be a valid non-negative integer" },
        { status: 400 }
      );
    }

    // ✅ Fetch userName from User collection
    const user = await User.findById(userId).select("fullName");
    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    // ✅ Create new product (sku auto-generated by pre-save hook)
    const product = new Product({
      name: name.trim(),
      description: description?.trim() || "",
      category: category.trim(),
      price: Number(price),
      stock: Number(stock),
      userId: user._id,
      userName: user.fullName,
      isActive: true,
    });

    const savedProduct = await product.save();

    return NextResponse.json(
      {
        success: true,
        message: "Product created successfully",
        product: savedProduct,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error creating product:", error);

    if (error.name === "ValidationError") {
      const validationErrors = Object.values(error.errors).map(
        (err) => err.message
      );
      return NextResponse.json(
        { error: "Validation failed", details: validationErrors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: "Failed to create product" },
      { status: 500 }
    );
  }
}
